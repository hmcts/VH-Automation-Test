parameters:
  - name: deploymentBranch
    displayName: Branch to Deploy
    type: string
    default: refs/heads/master

  - name: environment
    displayName: Environment
    type: string
    default: Sandbox
    values:
      - Preview
      - Dev
      - AAT
      - Sandbox
      - Test1
      - Test2
      - Demo
      - Preprod
      - Prod

  - name: prodEnvs
    displayName: Environments Using Prod Subscription
    type: object
    default:
      - Prod
      - Preprod

# Set variables once
variables:
  #- group: vh-domains-and-urls
  #- group: vh-apps-settings-generic
  #- group: VH-Automation-Test
  #- group: vh test users
  #- group: QuickLinks_Common
  #- group: Saucelabs
  #- ${{ if ne(variables['Build.Reason'], 'ResourceTrigger') }}:
  #    - ${{ if containsValue(parameters.prodEnvs, parameters.environment) }}:
  #        - group: vh-prod
  #    - ? ${{ if not(containsValue(parameters.prodEnvs, parameters.environment)) }}
  #      : - group: vh-preview
  #- ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
  #    - ? ${{ if or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')) }}
  #      : - group: vh-prod
  #    - ? ${{ if not(or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/hotfix/'))) }}
  #      : - group: vh-preview
#          # AzureAd
  - name: AzureAd:ClientId
    value: VH-Automation-Test-appid-v2
    secret: true
  - name: AzureAd:ClientSecret
    value: VH-Automation-Test-key-v2
    secret: true
  - name: AzureAd:TenantId
    value: tenantid
    secret: true
  - name: AzureAd:ClientId
    value: VH-Automation-Test-appid-v2
    secret: true
  - name: AzureAd:ClientSecret
    value: VH-Automation-Test-key-v2
    secret: true
  - name: AzureAd:VhVideoApiResourceId
    value: VH-Automation-Test-identifieruris
    secret: true
  # SauceLabs
  - name: Saucelabs:Username
    value: $(Saucelabs:Username)
  - name: Saucelabs:AccessKey
    value: $(Saucelabs:AccessKey)
  - name: Saucelabs:RealDeviceApiKey
    value: $(RealDeviceApiKey)
  # Testing
  - name: Testing:TestClientId
    value: vh-admin-web-appid
    secret: true
  - name: Testing:TestClientSecret
    value: vh-admin-web-key
    secret: true
  - name: Testing:TestUsernameStem
    value: $(TestUserSecrets:TestUsernameStem)
  - name: Testing:TestUserPassword
    value: $(TestUserSecrets:TestApiUserPassword)
# VhServices
  - name: VhServices:VideoApiUrl
    value: $(video_api_url)
  - name: VhServices:VideoApiResourceId
    value: vh-video-api-identifieruris
    secret: true
  - name: VhServices:UserApiUrl
    value: $(user_api_url)
  - name: VhServices:UserApiResourceId
    value: vh-user-api-identifieruris
    secret: true
          # - name: VhServices:TestApiUrl
            # value: $(test_api_url)
          # - name: VhServices:TestApiResourceId
            # value: vh-test-api-identifieruris
            # secret: true
  - name: VhServices:BookingsApiUrl
    value: $(bookings_api_url)
  - name: VhServices:BookingsApiResourceId
    value: vh-bookings-api-identifieruris
    secret: true
  - name: VhServices:VideoWebApiUrl
    value: $(video_web_url)
  - name: VhServices:VideoWebUrl
    value: $(video_web_url)
          # - name: VhServices:EnableAndroidSupport
            # value: $(EnableAndroidSupport)
          # - name: VhServices:EnableIOSMobileSupport
            # value: $(EnableIOSMobileSupport)
          # - name: VhServices:EnableIOSTabletSupport
            # value: $(EnableIOSTabletSupport)
          # - name: VhServices:EnableVideoFilters
            # value: $(EnableVideoFilters)
          # - name: VhServices:EnableDynamicEvidenceSharing
            # value: $(EnableDynamicEvidenceSharing)
  - name: VhServices:BookingsApiResourceId
    value: vh-bookings-api-identifieruris
    secret: true
  - name: VhServices:BookingsApiUrl
    value: $(bookings_api_url)
  - name: VhServices:UserApiResourceId
    value: vh-user-api-identifieruris
    secret: true
  - name: VhServices:UserApiUrl
    value: $(user_api_url)
  - name: VhServices:VideoApiResourceId
    value: vh-video-api-identifieruris
    secret: true
  - name: VhServices:VideoApiUrl
    value: $(video_api_url)
  - name: VhServices:EmailReformDomain
    value: $(EmailReformDomain)
  - name: VhServices:InternalEventSecret
    value: $(internal_event_secret)
  - name: VhServices:EnableAndroidSupport
    value: $(EnableAndroidSupport)
  - name: VhServices:EnableIOSMobileSupport
    value: $(EnableIOSMobileSupport)
  - name: VhServices:EnableIOSTabletSupport
    value: $(EnableIOSTabletSupport)
  - name: VhServices:EnableVideoFilters
    value: $(EnableVideoFilters)
  - name: VhServices:EnableDynamicEvidenceSharing
    value: $(EnableDynamicEvidenceSharing)
            # value: $(ValidAudience)

trigger: none
pr: none

pool:
  name: 'vh-self-hosted'

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts
  #pipelines:
  #  - pipeline: CI
  #    source: hmcts.VH-Automation-Test
  #    trigger:
  #      branches:
  #        - master
  #        - hotfix/*
  #        - release/*

stages:
#  - template: templates/vh-release.yml@templates
    parameters:
#      ${{ if ne(variables['Build.Reason'], 'ResourceTrigger') }}:
#        environments:
#          - ${{ parameters.environment }}
#        deploymentBranch: ${{ parameters.deploymentBranch }}
#      ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
#        deploymentBranch: resources.pipeline.CI.sourceBranch
      releaseParameters:
#        # runZapTests: ${{ parameters.RunZap }}
        subscription: $(env_Subscription)
        secrets_KeyVault: $(env_Secret_KeyVault)
        secrets_Subscription: $(env_Secret_Subscription)
        devOpsResource: vh_video_web
#        deploymentSlot: production
#        appName: VH-Automation-Test-$(environment)
#        resourceGroup: VH-Automation-Test-$(environment)
#        testCaseFilter: TestCategory=smoketest
#        runACTests: ${{ parameters.runACTests }}
#        # dependentApps:
#- name: vh-user-api-$(environment)
#     resourceGroup: vh-user-api-$(environment)
##            # healthEndpoint: $(user_api_url)healthcheck/health
#   - name: vh-bookings-api-$(environment)
#     resourceGroup: vh-bookings-api-$(environment)
##            # healthEndpoint: $(bookings_api_url)healthcheck/health
#   - name: vh-video-api-$(environment)
#     resourceGroup: vh-video-api-$(environment)
#            # healthEndpoint: $(video_api_url)healthcheck/health
#          # - name: vh-test-api-$(environment)
#            # resourceGroup: vh-test-api-$(environment)
#            # healthEndpoint: $(test_api_url)health/health
#        variables:


steps:

            
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration debug'
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/SwaggerJsonApi.csproj'
    arguments: '--configuration debug'
- task: PublishTestResults@2
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  condition: succeededOrFailed()
  displayName: Test API Results
  inputs:
    PathtoPublish: $(System.DefaultWorkingDirectory)/API/RestSharpAPI/TestResults
    artifactName: ApIResults
#- task: PublishBuildArtifacts@1
#  condition: succeededOrFailed()
#  displayName: Test UI Results
#  inputs:
#    PathtoPublish: $(System.DefaultWorkingDirectory)/UI/Selenium/TestResults
#    artifactName: UIResults

#- script: dotnet build 
#  displayName: 'dotnet build'
#- script: find RestSharpApi.dll
#- script: find UISelenium.dll
#- script: dotnet test RestSharpApi.dll UISelenium.dll
#  displayName: 'dotnet test RestSharpApi.dll UISelenium.dll'
#- publish: $(System.DefaultWorkingDirectory)
#  artifact: Output
